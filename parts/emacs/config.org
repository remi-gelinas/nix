#+PROPERTY: header-args :tangle init.el
#+PROPERTY: header-args+ :noweb yes

Enable lexical binding instead of dynamic binding.
#+BEGIN_SRC emacs-lisp
  ;;;  -*- lexical-binding: t -*-
#+END_SRC

Intialize `leaf.el`.
#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (package-initialize)
    (leaf
     leaf-keywords
     :ensure t
     :leaf-defer nil
     :config (leaf-keywords-init)))
#+END_SRC

** Utilities

#+BEGIN_SRC emacs-lisp
  (defmacro remi-gelinas/hook-if-daemon (name &rest BODY)
    "If run in a daemon context, define a one-shot hook containing BODY
  to run after the first frame is created. If run outside of a daemon context,
  evaluate BODY immediately."
    (let ((hook-name
           (intern (concat "remi-gelinas/hook-if-daemon/hook/" name))))
      `(cond
        ((daemonp)
         (defun ,hook-name ()
           (progn
             ,@BODY
             (remove-hook 'server-after-make-frame-hook ',hook-name)))
         (add-hook 'server-after-make-frame-hook ',hook-name))
        (t
         ,@BODY))))
#+END_SRC

** Misc

Disable native compilation, as Nix should have compiled all dependencies ahead of time.
#+BEGIN_SRC emacs-lisp
  (setq comp-deferred-compilation nil)
#+END_SRC

*** Fonts

Set up my preferred variable and fixed pitch fonts.
#+BEGIN_SRC emacs-lisp
  (remi-gelinas/hook-if-daemon
   "general-font-setup"
   (custom-theme-set-faces
    'user
    '(variable-pitch ((t (:family "@VARIABLE_FONT@" :height 200 :weight regular))))
    '(fixed-pitch ((t (:family "@FIXED_FONT@" :height 180))))))
#+END_SRC

** Packages

*** Org

I want multiple types of objects in `org-mode` to be displayed in a fixed monospace font, as it is mostly code.
#+NAME: org-font-setup
#+BEGIN_SRC emacs-lisp
  (custom-theme-set-faces 'user
                          '(org-block ((t (:inherit fixed-pitch))))
                          '(org-code
                            ((t (:inherit (shadow fixed-pitch)))))
                          '(org-document-info-keyword
                            ((t (:inherit (shadow fixed-pitch)))))
                          '(org-indent
                            ((t (:inherit (org-hide fixed-pitch)))))
                          '(org-meta-line
                            ((t
                              (:inherit
                               (font-lock-comment-face fixed-pitch)))))
                          '(org-property-value
                            ((t (:inherit fixed-pitch))) t)
                          '(org-special-keyword
                            ((t
                              (:inherit
                               (font-lock-comment-face fixed-pitch)))))
                          '(org-tag
                            ((t
                              (:inherit
                               (shadow fixed-pitch)
                               :weight bold
                               :height 0.8))))
                          '(org-verbatim
                            ((t (:inherit (shadow fixed-pitch))))))
#+END_SRC

Load the package:
#+BEGIN_SRC emacs-lisp
  (leaf
   org
   :ensure t
   :leaf-defer nil
   :config
   ;; Enable variable pitch fonts in org-mode
   (add-hook 'org-mode-hook 'variable-pitch-mode)

   ;; Configure fonts for org-mode buffers
   (remi-gelinas/hook-if-daemon "org-frame-setup"
    <<org-font-setup>>
    ))
#+END_SRC

*** Theme

Loads and applies the Nord theme.
#+BEGIN_SRC emacs-lisp
  (leaf
   nord-theme
   :ensure t
   :leaf-defer nil
   :config
   (remi-gelinas/hook-if-daemon "apply-nord-theme" (load-theme 'nord t)))
#+END_SRC

*** Elisp Formatting

Use the `elisp-autofmt` package for autoformatting elisp.
#+BEGIN_SRC emacs-lisp
  (leaf elisp-autofmt :ensure t :leaf-defer nil)
#+END_SRC

*** Git
Install Magit for Git operations.
#+BEGIN_SRC emacs-lisp
  (leaf magit :ensure t :leaf-defer nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; Disable startup message.
  (setq
   inhibit-startup-screen t
   inhibit-startup-echo-area-message (user-login-name))

  ;; Don't blink the cursor.
  (setq blink-cursor-mode nil)

  ;; Accept 'y' and 'n' rather than 'yes' and 'no'.
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Always show line and column number in the mode line.
  (line-number-mode)
  (column-number-mode)

  ;; Ensure spaces instead of tabs, 2 spaces per indentation
  (setq-default
   indent-tabs-mode nil
   tab-width 2
   c-basic-offset 2)

  ;; Remove trailing whitespace
  (setq-default show-trailing-whitespace t)

  ;; Prefer UTF-8
  (prefer-coding-system 'utf-8)

  ;; Disable bell
  (setq visible-bell t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (leaf envrc :ensure t :leaf-defer nil :config (envrc-global-mode))
#+END_SRC
